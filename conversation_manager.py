import asyncio
import logging
from datetime import datetime
from typing import List, Dict, Optional
from motor.motor_asyncio import AsyncIOMotorClient
from perfect_gpt_client import PerfectGPTClient

logger = logging.getLogger(__name__)

class ConversationManager:
    def __init__(self, mongo_uri: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –¥–∏–∞–ª–æ–≥–æ–≤
        
        Args:
            mongo_uri: URI –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB
        """
        self.client = AsyncIOMotorClient(mongo_uri)
        self.db = self.client.swp_db
        self.conversations_collection = self.db.conversations
        self.perfect_client = PerfectGPTClient()
        
    async def get_user_conversation_history(self, user_id: int, limit: int = 10) -> List[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            limit: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            
        Returns:
            –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∏–∞–ª–æ–≥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = self.conversations_collection.find({"user_id": user_id})
            conversations = await cursor.to_list(length=100)
            
            if not conversations:
                return []
            
            # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≤—Å–µ—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            all_messages = []
            for conv in conversations:
                if 'messages' in conv:
                    all_messages.extend(conv['messages'])
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ limit —Å–æ–æ–±—â–µ–Ω–∏–π
            all_messages.sort(key=lambda x: x.get('time', datetime.min))
            return all_messages[-limit:] if len(all_messages) > limit else all_messages
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return []
    
    async def save_user_message(self, user_id: int, message_text: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            message_text: –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            message = {
                "sender": "user",
                "text": message_text,
                "time": datetime.utcnow()
            }
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_conv = await self.conversations_collection.find_one({"user_id": user_id})
            
            if existing_conv:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –¥–∏–∞–ª–æ–≥—É
                await self.conversations_collection.update_one(
                    {"_id": existing_conv["_id"]},
                    {"$push": {"messages": message}}
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
                new_conv = {
                    "user_id": user_id,
                    "messages": [message]
                }
                await self.conversations_collection.insert_one(new_conv)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def save_bot_response(self, user_id: int, response_text: str) -> bool:
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –ë–î
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            response_text: –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ
        """
        try:
            message = {
                "sender": "bot",
                "text": response_text,
                "time": datetime.utcnow()
            }
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –¥–∏–∞–ª–æ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            existing_conv = await self.conversations_collection.find_one({"user_id": user_id})
            
            if existing_conv:
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –¥–∏–∞–ª–æ–≥—É
                await self.conversations_collection.update_one(
                    {"_id": existing_conv["_id"]},
                    {"$push": {"messages": message}}
                )
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
                new_conv = {
                    "user_id": user_id,
                    "messages": [message]
                }
                await self.conversations_collection.insert_one(new_conv)
            
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    def _create_context_from_history(self, history: List[Dict], current_question: str) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è LLM
        
        Args:
            history: –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤
            current_question: –¢–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°—Ç—Ä–æ–∫–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –¥–ª—è LLM
        """
        if not history:
            return f"–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {current_question}"
        
        context_parts = ["üìù –ò–°–¢–û–†–ò–Ø –î–ò–ê–õ–û–ì–ê:"]
        
        for i, message in enumerate(history[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            sender = "üë§ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨" if message.get('sender') == 'user' else "ü§ñ –ë–û–¢"
            text = message.get('text', '')
            time = message.get('time', '')
            
            context_parts.append(f"{i}. {sender}: {text}")
            if time:
                context_parts.append(f"   –í—Ä–µ–º—è: {time}")
            context_parts.append("")
        
        context_parts.append(f"üéØ –¢–ï–ö–£–©–ò–ô –í–û–ü–†–û–°: {current_question}")
        context_parts.append("")
        context_parts.append("üí° –ò–ù–°–¢–†–£–ö–¶–ò–Ø: –£—á–∏—Ç—ã–≤–∞–π –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â—É—é —Ç–µ–º—É - —Å–≤—è–∂–∏ –æ—Ç–≤–µ—Ç—ã. –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—á–∞–π –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ.")
        
        return "\n".join(context_parts)
    
    async def generate_contextual_response(self, user_id: int, question: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            question: –í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –û—Ç–≤–µ—Ç LLM —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.save_user_message(user_id, question)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
            history = await self.get_user_conversation_history(user_id, limit=10)
            
            # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
            context = self._create_context_from_history(history, question)
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é PerfectGPTClient, –ø–µ—Ä–µ–¥–∞–≤–∞—è –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç!
            response = await self.perfect_client.generate_perfect_response(context)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –æ—Ç–≤–µ—Ç—É
            contextual_response = f"{response}\n\nüìö *–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞ —É—á—Ç–µ–Ω*"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            await self.save_bot_response(user_id, contextual_response)
            
            return contextual_response
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return f"‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞: {str(e)}"
    
    async def clear_user_history(self, user_id: int) -> bool:
        """
        –û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–æ
        """
        try:
            result = await self.conversations_collection.delete_many({"user_id": user_id})
            return result.deleted_count > 0
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return False
    
    async def get_user_stats(self, user_id: int) -> Dict:
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        """
        try:
            conversations = await self.conversations_collection.find({"user_id": user_id}).to_list(length=100)
            
            total_messages = 0
            user_messages = 0
            bot_messages = 0
            
            for conv in conversations:
                if 'messages' in conv:
                    total_messages += len(conv['messages'])
                    for msg in conv['messages']:
                        if msg.get('sender') == 'user':
                            user_messages += 1
                        elif msg.get('sender') == 'bot':
                            bot_messages += 1
            
            return {
                "total_conversations": len(conversations),
                "total_messages": total_messages,
                "user_messages": user_messages,
                "bot_messages": bot_messages
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return {}

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à MONGO_URI)
    manager = ConversationManager("your_mongo_uri_here")
    
    # –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
    user_id = 123456789
    question = "–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?"
    
    response = await manager.generate_contextual_response(user_id, question)
    print(f"–û—Ç–≤–µ—Ç: {response}")
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    stats = await manager.get_user_stats(user_id)
    print(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {stats}")

if __name__ == "__main__":
    asyncio.run(main()) 
