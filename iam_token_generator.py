import os
import time
import json
import requests

class IAMTokenManager:
    def __init__(self, sa_key_env_var="SA_KEY", token_ttl=3600):
        self.token_ttl = token_ttl  # –í—Ä–µ–º—è –∂–∏–∑–Ω–∏ —Ç–æ–∫–µ–Ω–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (~1 —á–∞—Å)
        self.iam_token = None
        self.token_created_at = 0

        sa_key_json = os.getenv(sa_key_env_var)
        if not sa_key_json:
            raise ValueError(f"–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è {sa_key_env_var} –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")

        self.key_data = json.loads(sa_key_json)

    def get_iam_token(self):
        now = time.time()
        if not self.iam_token or now - self.token_created_at > self.token_ttl:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
            url = "https://iam.api.cloud.yandex.net/iam/v1/tokens"
            headers = {"Content-Type": "application/json"}

            # –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º JWT –∏–∑ service account –∫–ª—é—á–∞
            # –ù–æ –ø—Ä–æ—â–µ - –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —É–∂–µ OAuth —Ç–æ–∫–µ–Ω –≤ –∫–ª—é—á–µ, –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ–≥–æ:
            if "oauth_token" in self.key_data:
                data = {
                    "yandexPassportOauthToken": self.key_data["oauth_token"]
                }
            else:
                # –ï—Å–ª–∏ OAuth —Ç–æ–∫–µ–Ω–∞ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º service account id –∏ private_key
                # –¢–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å JWT (—Å–ª–æ–∂–Ω–µ–µ)
                # –ü–æ–∫–∞ –ø–æ–¥–Ω–∏–º–µ–º –æ—à–∏–±–∫—É
                raise RuntimeError("–í service account –∫–ª—é—á–µ –Ω–µ—Ç –ø–æ–ª—è 'oauth_token', –Ω—É–∂–µ–Ω OAuth —Ç–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞ –≤—Ä—É—á–Ω—É—é.")

            response = requests.post(url, headers=headers, data=json.dumps(data))

            if response.status_code == 200:
                self.iam_token = response.json()["iamToken"]
                self.token_created_at = now
                print("üîÑ IAM —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª—ë–Ω –≤—Ä—É—á–Ω—É—é")
            else:
                raise RuntimeError(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å IAM —Ç–æ–∫–µ–Ω: {response.status_code} {response.text}")

        return self.iam_token

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ç–æ–∫–µ–Ω–æ–≤
iam_manager = IAMTokenManager()

# –ü—Ä–∏–º–µ—Ä —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏ —á–µ—Ä–µ–∑ SpeechKit
def speechkit_stt(voice_data, folder_id, lang="ru-RU"):
    iam_token = iam_manager.get_iam_token()
    headers = {
        "Authorization": f"Bearer {iam_token}",
        "Content-Type": "audio/ogg"
    }

    response = requests.post(
        "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize",
        headers=headers,
        params={"folderId": folder_id, "lang": lang},
        data=voice_data
    )

    if response.status_code == 200:
        return response.json().get("result")
    else:
        print(f"–û—à–∏–±–∫–∞ STT: {response.status_code} {response.text}")
        return None
