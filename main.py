from fastapi import FastAPI, Request
from pydantic import BaseModel
from datetime import timezone
from telegram import Update, ReplyKeyboardMarkup
from io import BytesIO
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes, ConversationHandler,
)
import os
import httpx
import uvicorn  
import requests
from dotenv import load_dotenv
from perfect_gpt_client import *
from conversation_manager import ConversationManager

# –∏–º–ø–æ—Ä—Ç —Ñ–∞—Å—Ç–∞–ø–∏ –∏–∑ –∫–æ–Ω–µ–∫—Ç–æ—Ä–∞ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
from db_connector.app.main import app as db_app

load_dotenv()

model = PerfectGPTClient()
MONGO_KEY = os.getenv("MONGO_KEY", "mongodb+srv://desgun4ik:bgB1t8KbEwToWc9d@cluster0.veevvji.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0")
conversation_manager = ConversationManager(MONGO_KEY)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")  # –ü—Ä–∏–º–µ—Ä: https://your-project.up.railway.app
IAM_TOKEN = os.getenv("IAM_TOKEN")
FOLDER_ID = os.getenv("FOLDER_ID")

print(f"üîó MongoDB: –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ")
print(f"üîë Telegram Bot: {'‚úÖ –ì–æ—Ç–æ–≤' if TOKEN else '‚ùå –¢—Ä–µ–±—É–µ—Ç—Å—è TELEGRAM_BOT_TOKEN'}")

if not TOKEN:
    raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

app = FastAPI()
app.mount("/db", db_app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
application = Application.builder().token(TOKEN).build()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    [["/ask", "/help"]],
    resize_keyboard=True,
    one_time_keyboard=False,
)

# ===== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ =====
START, GET_NAME1 = range(2)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã—Ö —Å–∏—Å—Ç–µ–º.",
        reply_markup=main_keyboard,
    )
    api_check_user = f"https://mars1-production.up.railway.app/db/users/{update.effective_user.id}"
    async with httpx.AsyncClient() as client:
        try:
            response_get_user = await client.get(api_check_user)
            print("–≤–æ—Ç —Ç–≤–æ–π –∫–æ–¥ –Ω–∞ –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å", response_get_user.status_code)
            if response_get_user.status_code == 200:
                await update.message.reply_text(
                    "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                    reply_markup=main_keyboard,
                )
                return ConversationHandler.END
        except httpx.RequestError as e:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                reply_markup=main_keyboard,
            )
            return ConversationHandler.END
        
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ",
        reply_markup=main_keyboard,
    )
    return GET_NAME1
    
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_name = update.message.text
    context.user_data['name'] = user_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è


    payload_name_json = {
        "_id" : update.effective_user.id,
        "name" : user_name,
    }
    api_create_user = "https://mars1-production.up.railway.app/db/users/"
    async with httpx.AsyncClient() as client:
        try:
            await client.post(api_create_user, json=payload_name_json)
            await update.message.reply_text(
                f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
                reply_markup=main_keyboard,
            )
        except httpx.RequestError as e:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                reply_markup=main_keyboard,

            )

    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    await update.message.reply_text(
        "–û—Ç–º–µ–Ω–∞",
        reply_markup=main_keyboard,
    )
    if 'conv_id' in context.user_data:
        del context.user_data['conv_id']

    return ConversationHandler.END
    
async def cancel_for_asking(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    command = update.message.text.split()[0]  # –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É (/help, /start –∏ —Ç. –¥.)

    if command == "/help":
        
        await help_command(update, context)  # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è help_command
    elif command == "/start":
        await start(update, context)
    elif command == "/ask":
        if 'conv_id' in context.user_data:
            del context.user_data['conv_id']
        return await ask(update, context)
    return ConversationHandler.END


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/ask - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/help - –ø–æ–º–æ—â—å\n"
        "/history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤\n"
        "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤\n"
        "/stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
        reply_markup=main_keyboard,
    )

WAITING_FOR_MESSAGE = 1

async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    ask_keyboard = ReplyKeyboardMarkup([["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True, one_time_keyboard=True)
    context.user_data['last_message'] = None
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ –∑–∞–ø—Ä–æ—Å! –ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –Ω–∞–∂–Ω–∏—Ç–µ /cancel", reply_markup=main_keyboard)
    async with httpx.AsyncClient() as client:
        api_create_conv = "https://mars1-production.up.railway.app/db/conversations/"
        payload_conv_json = {
            "user_id": update.effective_user.id,
            "messages": []
        }
        try:
            response_create_conv = await client.post(api_create_conv, json=payload_conv_json)
            context.user_data['conv_id'] = response_create_conv.json().get("_id")
        except httpx.RequestError as e:
            await update.message.reply_text(
                "–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ -> –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏–Ω—Å—Ç—Ä–∞—Ç–æ—Ä—É",
                reply_markup=main_keyboard,
            )
        return WAITING_FOR_MESSAGE

async def extract_text_from_voice(message):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏–∑ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        voice_file = await message.voice.get_file()
        voice_data = await voice_file.download_as_bytearray()

        headers = {
            "Authorization": f"Bearer {IAM_TOKEN}",
            "Content-Type": "audio/ogg"
        }

        response = requests.post(
            "https://stt.api.cloud.yandex.net/speech/v1/stt:recognize",
            headers=headers,
            params={"folderId": FOLDER_ID, "lang": "ru-RU"},
            data=voice_data
        )

        if response.status_code == 200:
            return response.json().get("result")
        return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {str(e)}")
        return None
        
async def ask_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_text = await extract_text_from_voice(update.message) if update.message.voice else update.message.text if update.message.text else None
    if not user_text:
        await user_message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        return
    user_id = update.effective_user.id
    context.user_data['last_message'] = user_text
    global last_bot_response
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é ConversationManager
    response_to_bot = await conversation_manager.generate_contextual_response(user_id, user_text)
    print(response_to_bot)
    last_bot_response = response_to_bot  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —á–µ—Ä–µ–∑ /webhook
    await update.message.reply_text(
        response_to_bot,
        reply_markup=main_keyboard,
        parse_mode='Markdown',
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ API (–¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Å–∏—Å—Ç–µ–º–æ–π)
    api_add_message = f"https://mars1-production.up.railway.app/db/conversations/{context.user_data['conv_id']}/messages"
    payload_add_message = {
        "sender" : "user",
        "text" : user_text,
        "time" : update.message.date.astimezone(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
    }
    payload_add_message_bot = {
        "sender" : "bot",
        "text": response_to_bot,
        "time": update.message.date.astimezone(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
    }
    
    async with httpx.AsyncClient() as client:
        try:
            response_add_message_bot = await client.post(api_add_message, json=payload_add_message_bot)
        except httpx.RequestError as e:
            await update.message.reply_text(
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É(", 
                reply_markup=main_keyboard,
            )
    async with httpx.AsyncClient() as client:
        try:
            response_add_message = await client.post(api_add_message, json=payload_add_message)
        except httpx.RequestError as e:
            await update.message.reply_text(
                "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É(((", 
                reply_markup=main_keyboard,
            )
    return WAITING_FOR_MESSAGE


# ===== –ù–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–µ–π =====
async def history_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /history - –ø–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤
        history = await conversation_manager.get_user_conversation_history(user_id, limit=10)
        
        if not history:
            await update.message.reply_text(
                "üìù –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –ø—É—Å—Ç–∞\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤. "
                "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –±—É–¥—É –∑–∞–ø–æ–º–∏–Ω–∞—Ç—å –Ω–∞—à—É –±–µ—Å–µ–¥—É!",
                reply_markup=main_keyboard,
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π
        history_text = "üìù –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:\n\n"
        
        for i, message in enumerate(history[-5:], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            sender = "üë§ –í—ã" if message.get('sender') == 'user' else "ü§ñ –ë–æ—Ç"
            text = message.get('text', '')[:100] + "..." if len(message.get('text', '')) > 100 else message.get('text', '')
            time = message.get('time', '')
            
            history_text += f"{i}. {sender}\n"
            history_text += f"üí¨ {text}\n"
            if time:
                history_text += f"üïê {time}\n"
            history_text += "\n"
        
        history_text += f"üìä –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(history)}"
        
        await update.message.reply_text(history_text, reply_markup=main_keyboard)
        
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤.",
            reply_markup=main_keyboard,
        )

async def clear_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–æ–≤"""
    user_id = update.effective_user.id
    
    try:
        # –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        success = await conversation_manager.clear_user_history(user_id)
        
        if success:
            await update.message.reply_text(
                "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –æ—á–∏—â–µ–Ω–∞\n\n"
                "–í—Å–µ –≤–∞—à–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –¥–∏–∞–ª–æ–≥–∏ —É–¥–∞–ª–µ–Ω—ã. "
                "–¢–µ–ø–µ—Ä—å —è –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å –±–µ–∑ —É—á–µ—Ç–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.",
                reply_markup=main_keyboard,
            )
        else:
            await update.message.reply_text(
                "‚ÑπÔ∏è –ò—Å—Ç–æ—Ä–∏—è —É–∂–µ –ø—É—Å—Ç–∞\n\n"
                "–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏.",
                reply_markup=main_keyboard,
            )
        
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤.",
            reply_markup=main_keyboard,
        )

async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    user_id = update.effective_user.id
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await conversation_manager.get_user_stats(user_id)
        
        if not stats or stats.get('total_messages', 0) == 0:
            await update.message.reply_text(
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. "
                "–ù–∞—á–Ω–∏—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –∏ —è –±—É–¥—É –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å!",
                reply_markup=main_keyboard,
            )
            return
        
        stats_text = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n\n"
        stats_text += f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats.get('total_messages', 0)}\n"
        stats_text += f"üë§ –í–∞—à–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: {stats.get('user_messages', 0)}\n"
        stats_text += f"ü§ñ –û—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞: {stats.get('bot_messages', 0)}\n"
        stats_text += f"üìù –î–∏–∞–ª–æ–≥–æ–≤: {stats.get('total_conversations', 0)}\n\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if stats.get('user_messages', 0) > 10:
            stats_text += "üéØ –í—ã –∞–∫—Ç–∏–≤–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã."
        elif stats.get('user_messages', 0) > 5:
            stats_text += "üëç –•–æ—Ä–æ—à–µ–µ –Ω–∞—á–∞–ª–æ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –±–æ–ª—å—à–µ –≤–æ–ø—Ä–æ—Å–æ–≤."
        else:
            stats_text += "üöÄ –ù–∞—á–Ω–∏—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã!"
        
        await update.message.reply_text(stats_text, reply_markup=main_keyboard)
        
    except Exception as e:
        await update.message.reply_text(
            "‚ùå –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.",
            reply_markup=main_keyboard,
        )

# ===== –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ =====
def register_handlers():
    conv_handler_start = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME1:[
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    get_name,
                )
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    application.add_handler(conv_handler_start)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("history", history_command))
    application.add_handler(CommandHandler("clear", clear_command))
    application.add_handler(CommandHandler("stats", stats_command))

    ask_conv_handler = ConversationHandler(
        entry_points=[CommandHandler("ask", ask)],
        states={
            WAITING_FOR_MESSAGE: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    ask_handler
                )
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.COMMAND, cancel_for_asking),
        ],
    )
    application.add_handler(ask_conv_handler)


register_handlers()
class SmartQuestionRequest(BaseModel):
    question: str
    user_id: int
class QuestionRequest(BaseModel):
    question: str
@app.post("/send_response")
async def send_response(request: QuestionRequest)-> str:
    """This endpoint send the question from the user to the LLM model"""
    answer = await model.generate_perfect_response(request.question)
    return answer
@app.post("/send_response_with_history")
async def send_response_with_history(request: SmartQuestionRequest)-> str:
    """This endpoint send the question from the user to the LLM model with history"""
    answer = await conversation_manager.generate_contextual_response(request.user_id, request.question)
    return answer
# ===== –í–µ–±—Ö—É–∫ –∏ –∑–∞–ø—É—Å–∫ =====
last_bot_response = None  # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∞

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        await application.process_update(update)
        return {"status": "ok"}
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return {"status": "error", "message": str(e)}

@app.get("/")
async def health_check():
    return {"status": "Bot is running"}

@app.on_event("startup")
async def startup():
    await application.initialize()
    await application.bot.set_webhook(f"{WEBHOOK_URL}/webhook")

@app.on_event("shutdown")
async def shutdown():
    await application.bot.delete_webhook()
    await application.shutdown()

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ (–≤–∞–∂–Ω–æ –¥–ª—è Railway)
if __name__ == "__main__":
    import multiprocessing
    multiprocessing.freeze_support()
    
    port = int(os.getenv("PORT", 8000))  # Railway –∏—Å–ø–æ–ª—å–∑—É–µ—Ç $PORT
    uvicorn.run(app, host="0.0.0.0", port=port, reload=False)
