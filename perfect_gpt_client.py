#!/usr/bin/env python3
"""
–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–´–ô GPT API CLIENT
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑ app_structure.json + –≤–Ω–µ—à–Ω–∏–π Gemini API
"""

import json
import asyncio
import requests
import logging
from typing import Dict, List, Optional, Tuple
from collections import defaultdict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PerfectGPTClient:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
        self.api_url = "https://namazlive.herokuapp.com/gpt/generate"
        self.api_key = "jiro_dreams_of_sushi"
        self.headers = {
            "Content-Type": "application/json",
            "x-api-key": self.api_key
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.app_structure = self._load_app_structure()
        self.perfect_analysis = self._create_perfect_analysis()
        
        print("üéØ PERFECT GPT CLIENT –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù")
        print(f"üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ {len(self.perfect_analysis['tabs'])} –≤–∫–ª–∞–¥–æ–∫")
        print(f"üîß –ù–∞–π–¥–µ–Ω–æ {len(self.perfect_analysis['functions'])} —Ñ—É–Ω–∫—Ü–∏–π")
        print(f"üìö –ù–∞–π–¥–µ–Ω–æ {len(self.perfect_analysis['articles'])} —Å—Ç–∞—Ç–µ–π")
        print(f"üïå –ù–∞–π–¥–µ–Ω–æ {len(self.perfect_analysis['prayers'])} –º–æ–ª–∏—Ç–≤")
        print(f"‚öôÔ∏è –ù–∞–π–¥–µ–Ω–æ {len(self.perfect_analysis['settings'])} –Ω–∞—Å—Ç—Ä–æ–µ–∫")
        print(f"üé® –ù–∞–π–¥–µ–Ω–æ {len(self.perfect_analysis['ui_elements'])} UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
    
    def _load_app_structure(self) -> Dict:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            with open('app_structure.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ app_structure.json: {e}")
            return {}
    
    def _create_perfect_analysis(self) -> Dict:
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        analysis = {
            'tabs': {},
            'functions': {},
            'articles': {},
            'prayers': {},
            'settings': {},
            'ui_elements': {},
            'navigation_paths': {},
            'search_index': defaultdict(list)
        }
        
        if not self.app_structure:
            print("‚ùå app_structure.json –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω")
            return analysis
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if isinstance(self.app_structure, list):
            tabs = self.app_structure
            print(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞: —Å–ø–∏—Å–æ–∫, –≤–∫–ª–∞–¥–æ–∫: {len(tabs)}")
        elif isinstance(self.app_structure, dict):
            print(f"üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞: —Å–ª–æ–≤–∞—Ä—å, –∫–ª—é—á–∏: {list(self.app_structure.keys())}")
            if 'tabs' in self.app_structure:
                tabs = self.app_structure['tabs']
            elif 'data' in self.app_structure and 'tabs' in self.app_structure['data']:
                tabs = self.app_structure['data']['tabs']
            elif 'app' in self.app_structure and 'tabs' in self.app_structure['app']:
                tabs = self.app_structure['app']['tabs']
            else:
                print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –≤–∫–ª–∞–¥–∫–∏ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ!")
                return analysis
            print(f"üìä –ù–∞–π–¥–µ–Ω–æ –≤–∫–ª–∞–¥–æ–∫: {len(tabs)}")
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ app_structure.json")
            return analysis
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –≤–∫–ª–∞–¥–∫—É –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ
        for tab in tabs:
            tab_id = tab.get('id', 'unknown')
            tab_title = tab.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            
            analysis['tabs'][tab_id] = {
                'title': tab_title,
                'id': tab_id,
                'type': tab.get('type', 'unknown'),
                'sections': {},
                'items': [],
                'navigation': []
            }
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏
            if 'items' in tab:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏
                analysis['tabs'][tab_id]['items'] = tab['items']
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏
                self._analyze_tab_items_perfect(tab['items'], analysis, tab_id)
        
        return analysis
    
    def _analyze_tab_items_perfect(self, items: List, analysis: Dict, tab_id: str, path: str = ""):
        """–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤–∫–ª–∞–¥–∫–∏"""
        for item in items:
            item_id = item.get('id', 'unknown')
            item_title = item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')
            item_type = item.get('type', 'unknown')
            
            current_path = f"{path}/{item_id}" if path else item_id
            full_path = f"{tab_id}/{current_path}"
            
            # –°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å —ç–ª–µ–º–µ–Ω—Ç–∞
            element_info = {
                'id': item_id,
                'title': item_title,
                'type': item_type,
                'path': full_path,
                'tab': tab_id,
                'description': item.get('description', ''),
                'icon': item.get('icon', ''),
                'url': item.get('url', ''),
                'elements': item.get('elements', []),
                'knowledge': item.get('knowledge', {}),
                'items': []
            }
            
            # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —ç–ª–µ–º–µ–Ω—Ç
            if item_type == 'function':
                analysis['functions'][item_id] = element_info
            elif item_type == 'article':
                analysis['articles'][item_id] = element_info
            elif 'prayer' in item_type or any(word in item_title.lower() for word in ['prayer', 'fard', 'sunnah', 'witr']):
                analysis['prayers'][item_id] = element_info
            elif 'setting' in item_type or 'settings' in item_id:
                analysis['settings'][item_id] = element_info
            else:
                analysis['ui_elements'][item_id] = element_info
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
            keywords = self._extract_keywords_perfect(item_title, item.get('description', ''))
            for keyword in keywords:
                analysis['search_index'][keyword].append(element_info)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç—ã
            if 'items' in item and item['items']:
                element_info['items'] = []
                for sub_item in item['items']:
                    sub_info = {
                        'id': sub_item.get('id', 'unknown'),
                        'title': sub_item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'),
                        'type': sub_item.get('type', 'unknown'),
                        'description': sub_item.get('description', ''),
                        'icon': sub_item.get('icon', ''),
                        'url': sub_item.get('url', ''),
                        'elements': sub_item.get('elements', [])
                    }
                    element_info['items'].append(sub_info)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç—ã –≤ –ø–æ–∏—Å–∫–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å
                    sub_keywords = self._extract_keywords_perfect(sub_info['title'], sub_info['description'])
                    for keyword in sub_keywords:
                        analysis['search_index'][keyword].append(sub_info)
                
                # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç—ã
                self._analyze_tab_items_perfect(item['items'], analysis, tab_id, current_path)
    
    def _extract_keywords_perfect(self, title: str, description: str) -> List[str]:
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è"""
        text = f"{title} {description}".lower()
        keywords = []
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        keyword_patterns = [
            'prayer', '–º–æ–ª–∏—Ç–≤–∞', '–Ω–∞–º–∞–∑', 'fard', 'sunnah', 'witr', 'tahajjud',
            'settings', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'app', '–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ', 'language', '—è–∑—ã–∫',
            'dark', '—Ç–µ–º–Ω—ã–π', 'mode', '—Ä–µ–∂–∏–º', 'notification', '—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            'time', '–≤—Ä–µ–º—è', 'calculation', '—Ä–∞—Å—á–µ—Ç', 'qibla', '–∫–∏–±–ª–∞',
            'quran', '–∫–æ—Ä–∞–Ω', 'article', '—Å—Ç–∞—Ç—å—è', 'function', '—Ñ—É–Ω–∫—Ü–∏—è',
            'tab', '–≤–∫–ª–∞–¥–∫–∞', 'section', '—Ä–∞–∑–¥–µ–ª', 'list', '—Å–ø–∏—Å–æ–∫'
        ]
        
        for pattern in keyword_patterns:
            if pattern in text:
                keywords.append(pattern)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Å–ª–æ–≤–∞
        words = text.split()
        for word in words:
            if len(word) > 3 and word not in keywords:
                keywords.append(word)
        
        return keywords
    
    def _find_exact_path(self, question: str) -> Optional[Dict]:
        """–ù–∞—Ö–æ–¥–∏—Ç —Ç–æ—á–Ω—ã–π –ø—É—Ç—å –∫ —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ –≤–æ–ø—Ä–æ—Å—É"""
        question_lower = question.lower()
        
        # –ò—â–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        for keyword, elements in self.perfect_analysis['search_index'].items():
            if keyword in question_lower:
                for element in elements:
                    if self._is_relevant(element, question_lower):
                        return element
        
        return None
    
    def _is_relevant(self, element: Dict, question: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç–∞ –≤–æ–ø—Ä–æ—Å—É"""
        title = element.get('title', '').lower()
        description = element.get('description', '').lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        if any(word in title for word in question.split()):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏–Ω–æ–Ω–∏–º—ã
        synonyms = {
            'dark': ['—Ç–µ–º–Ω—ã–π', '—Ç–µ–º–Ω–∞—è', '—Ç–µ–º–Ω–æ–µ', 'dark mode', '—Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º'],
            'language': ['—è–∑—ã–∫', 'language', 'lang'],
            'settings': ['–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', 'settings', 'config'],
            'prayer': ['–º–æ–ª–∏—Ç–≤–∞', '–Ω–∞–º–∞–∑', 'prayer'],
            'time': ['–≤—Ä–µ–º—è', 'time', '—á–∞—Å—ã']
        }
        
        for key, syn_list in synonyms.items():
            if key in question or any(syn in question for syn in syn_list):
                if any(syn in title or syn in description for syn in syn_list):
                    return True
        
        return False
    
    def _create_perfect_system_message(self, question: str, found_element: Optional[Dict]) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –í–°–ï–ú–ò –¥–µ—Ç–∞–ª—è–º–∏ –∏–∑ app_structure.json"""
        
        # –ë–∞–∑–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        base_message = """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é NamazApp. –¢—ã –∑–Ω–∞–µ—à—å –í–°–Æ —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–æ –º–µ–ª—å—á–∞–π—à–∏—Ö –¥–µ—Ç–∞–ª–µ–π.

–ü–û–õ–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø –ò–ó app_structure.json:
"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –≤–∫–ª–∞–¥–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
        base_message += "\nüì± –í–ö–õ–ê–î–ö–ò –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø:\n"
        for tab_id, tab_info in self.perfect_analysis['tabs'].items():
            base_message += f"\n–í–ö–õ–ê–î–ö–ê: {tab_info['title']} (ID: {tab_id}, –¢–∏–ø: {tab_info['type']})\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤–∫–ª–∞–¥–∫–∏ —Å –ø–æ–ª–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
            if 'items' in tab_info:
                base_message += "–≠–õ–ï–ú–ï–ù–¢–´ –í–ö–õ–ê–î–ö–ò:\n"
                for item in tab_info['items']:
                    base_message += f"  - {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {item.get('id', 'unknown')}, –¢–∏–ø: {item.get('type', 'unknown')})\n"
                    if item.get('description'):
                        base_message += f"    –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n"
                    if item.get('icon'):
                        base_message += f"    –ò–∫–æ–Ω–∫–∞: {item['icon']}\n"
                    if item.get('url'):
                        base_message += f"    URL: {item['url']}\n"
                    if item.get('elements'):
                        base_message += f"    –≠–ª–µ–º–µ–Ω—Ç—ã: {item['elements']}\n"
                    if item.get('knowledge'):
                        base_message += f"    –ó–Ω–∞–Ω–∏—è: {item['knowledge']}\n"
                    if item.get('shows'):
                        base_message += f"    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è: {item['shows']}\n"
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç—ã
                    if item.get('items'):
                        base_message += f"    –ü–û–î–≠–õ–ï–ú–ï–ù–¢–´:\n"
                        for sub_item in item['items']:
                            base_message += f"      - {sub_item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {sub_item.get('id', 'unknown')}, –¢–∏–ø: {sub_item.get('type', 'unknown')})\n"
                            if sub_item.get('description'):
                                base_message += f"        –û–ø–∏—Å–∞–Ω–∏–µ: {sub_item['description']}\n"
                            if sub_item.get('icon'):
                                base_message += f"        –ò–∫–æ–Ω–∫–∞: {sub_item['icon']}\n"
                            if sub_item.get('url'):
                                base_message += f"        URL: {sub_item['url']}\n"
                            if sub_item.get('elements'):
                                base_message += f"        –≠–ª–µ–º–µ–Ω—Ç—ã: {sub_item['elements']}\n"
                            if sub_item.get('knowledge'):
                                base_message += f"        –ó–Ω–∞–Ω–∏—è: {sub_item['knowledge']}\n"
                            
                            # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç–æ–≤
                            if sub_item.get('items'):
                                base_message += f"        –≠–õ–ï–ú–ï–ù–¢–´:\n"
                                for sub_sub_item in sub_item['items']:
                                    base_message += f"          - {sub_sub_item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {sub_sub_item.get('id', 'unknown')}, –¢–∏–ø: {sub_sub_item.get('type', 'unknown')})\n"
                                    if sub_sub_item.get('description'):
                                        base_message += f"            –û–ø–∏—Å–∞–Ω–∏–µ: {sub_sub_item['description']}\n"
                                    if sub_sub_item.get('icon'):
                                        base_message += f"            –ò–∫–æ–Ω–∫–∞: {sub_sub_item['icon']}\n"
                                    if sub_sub_item.get('url'):
                                        base_message += f"            URL: {sub_sub_item['url']}\n"
                                    if sub_sub_item.get('elements'):
                                        base_message += f"            –≠–ª–µ–º–µ–Ω—Ç—ã: {sub_sub_item['elements']}\n"
                                    if sub_sub_item.get('knowledge'):
                                        base_message += f"            –ó–Ω–∞–Ω–∏—è: {sub_sub_item['knowledge']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –º–æ–ª–∏—Ç–≤—ã —Å —Ç–æ—á–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
        base_message += "\nüïå –ú–û–õ–ò–¢–í–´ (–¢–û–ß–ù–´–ï –î–ê–ù–ù–´–ï):\n"
        for prayer_id, prayer_info in self.perfect_analysis['prayers'].items():
            base_message += f"- {prayer_info['title']} (ID: {prayer_id})\n"
            base_message += f"  –¢–∏–ø: {prayer_info['type']}\n"
            base_message += f"  –ü—É—Ç—å: {prayer_info['path']}\n"
            base_message += f"  –í–∫–ª–∞–¥–∫–∞: {prayer_info['tab']}\n"
            if prayer_info.get('description'):
                base_message += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {prayer_info['description']}\n"
            if prayer_info.get('icon'):
                base_message += f"  –ò–∫–æ–Ω–∫–∞: {prayer_info['icon']}\n"
            if prayer_info.get('knowledge'):
                base_message += f"  –ó–Ω–∞–Ω–∏—è: {prayer_info['knowledge']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å —Ç–æ—á–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
        base_message += "\n‚öôÔ∏è –ù–ê–°–¢–†–û–ô–ö–ò (–¢–û–ß–ù–´–ï –î–ê–ù–ù–´–ï):\n"
        for setting_id, setting_info in self.perfect_analysis['settings'].items():
            base_message += f"- {setting_info['title']} (ID: {setting_id})\n"
            base_message += f"  –¢–∏–ø: {setting_info['type']}\n"
            base_message += f"  –ü—É—Ç—å: {setting_info['path']}\n"
            base_message += f"  –í–∫–ª–∞–¥–∫–∞: {setting_info['tab']}\n"
            if setting_info.get('description'):
                base_message += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {setting_info['description']}\n"
            if setting_info.get('elements'):
                base_message += f"  –≠–ª–µ–º–µ–Ω—Ç—ã: {setting_info['elements']}\n"
            if setting_info.get('knowledge'):
                base_message += f"  –ó–Ω–∞–Ω–∏—è: {setting_info['knowledge']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Å—Ç–∞—Ç—å–∏ —Å —Ç–æ—á–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
        base_message += "\nüìö –°–¢–ê–¢–¨–ò (–¢–û–ß–ù–´–ï –î–ê–ù–ù–´–ï):\n"
        for article_id, article_info in self.perfect_analysis['articles'].items():
            base_message += f"- {article_info['title']} (ID: {article_id})\n"
            base_message += f"  –¢–∏–ø: {article_info['type']}\n"
            base_message += f"  –ü—É—Ç—å: {article_info['path']}\n"
            base_message += f"  –í–∫–ª–∞–¥–∫–∞: {article_info['tab']}\n"
            if article_info.get('description'):
                base_message += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {article_info['description']}\n"
            if article_info.get('url'):
                base_message += f"  URL: {article_info['url']}\n"
            if article_info.get('icon'):
                base_message += f"  –ò–∫–æ–Ω–∫–∞: {article_info['icon']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï —Ñ—É–Ω–∫—Ü–∏–∏ —Å —Ç–æ—á–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
        base_message += "\nüîß –§–£–ù–ö–¶–ò–ò (–¢–û–ß–ù–´–ï –î–ê–ù–ù–´–ï):\n"
        for func_id, func_info in self.perfect_analysis['functions'].items():
            base_message += f"- {func_info['title']} (ID: {func_id})\n"
            base_message += f"  –¢–∏–ø: {func_info['type']}\n"
            base_message += f"  –ü—É—Ç—å: {func_info['path']}\n"
            base_message += f"  –í–∫–ª–∞–¥–∫–∞: {func_info['tab']}\n"
            if func_info.get('description'):
                base_message += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {func_info['description']}\n"
            if func_info.get('url'):
                base_message += f"  URL: {func_info['url']}\n"
            if func_info.get('icon'):
                base_message += f"  –ò–∫–æ–Ω–∫–∞: {func_info['icon']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï UI —ç–ª–µ–º–µ–Ω—Ç—ã —Å —Ç–æ—á–Ω—ã–º–∏ –¥–µ—Ç–∞–ª—è–º–∏
        base_message += "\nüé® UI –≠–õ–ï–ú–ï–ù–¢–´ (–¢–û–ß–ù–´–ï –î–ê–ù–ù–´–ï):\n"
        for ui_id, ui_info in self.perfect_analysis['ui_elements'].items():
            base_message += f"- {ui_info['title']} (ID: {ui_id})\n"
            base_message += f"  –¢–∏–ø: {ui_info['type']}\n"
            base_message += f"  –ü—É—Ç—å: {ui_info['path']}\n"
            base_message += f"  –í–∫–ª–∞–¥–∫–∞: {ui_info['tab']}\n"
            if ui_info.get('description'):
                base_message += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {ui_info['description']}\n"
            if ui_info.get('icon'):
                base_message += f"  –ò–∫–æ–Ω–∫–∞: {ui_info['icon']}\n"
            if ui_info.get('url'):
                base_message += f"  URL: {ui_info['url']}\n"
            if ui_info.get('elements'):
                base_message += f"  –≠–ª–µ–º–µ–Ω—Ç—ã: {ui_info['elements']}\n"
            if ui_info.get('knowledge'):
                base_message += f"  –ó–Ω–∞–Ω–∏—è: {ui_info['knowledge']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ
        if found_element:
            base_message += f"""
üéØ –ù–ê–ô–î–ï–ù–ù–´–ô –≠–õ–ï–ú–ï–ù–¢ –î–õ–Ø –í–û–ü–†–û–°–ê:
- –ù–∞–∑–≤–∞–Ω–∏–µ: {found_element.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- ID: {found_element.get('id', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –¢–∏–ø: {found_element.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –ü—É—Ç—å: {found_element.get('path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –í–∫–ª–∞–¥–∫–∞: {found_element.get('tab', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
- –û–ø–∏—Å–∞–Ω–∏–µ: {found_element.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')}
- –ò–∫–æ–Ω–∫–∞: {found_element.get('icon', '–ù–µ—Ç –∏–∫–æ–Ω–∫–∏')}
- URL: {found_element.get('url', '–ù–µ—Ç URL')}
- –≠–ª–µ–º–µ–Ω—Ç—ã: {found_element.get('elements', [])}
- –ó–Ω–∞–Ω–∏—è: {found_element.get('knowledge', {})}
"""
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥—ç–ª–µ–º–µ–Ω—Ç–∞—Ö
            if found_element.get('items'):
                base_message += "\n–ü–û–î–≠–õ–ï–ú–ï–ù–¢–´ –ù–ê–ô–î–ï–ù–ù–û–ì–û –≠–õ–ï–ú–ï–ù–¢–ê:\n"
                for item in found_element['items']:
                    base_message += f"- {item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {item.get('id', 'unknown')}, –¢–∏–ø: {item.get('type', 'unknown')})\n"
                    if item.get('description'):
                        base_message += f"  –û–ø–∏—Å–∞–Ω–∏–µ: {item['description']}\n"
                    if item.get('icon'):
                        base_message += f"  –ò–∫–æ–Ω–∫–∞: {item['icon']}\n"
                    if item.get('url'):
                        base_message += f"  URL: {item['url']}\n"
                    if item.get('elements'):
                        base_message += f"  –≠–ª–µ–º–µ–Ω—Ç—ã: {item['elements']}\n"
                    if item.get('knowledge'):
                        base_message += f"  –ó–Ω–∞–Ω–∏—è: {item['knowledge']}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        base_message += f"""
üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê:
- –í—Å–µ–≥–æ –≤–∫–ª–∞–¥–æ–∫: {len(self.perfect_analysis['tabs'])}
- –í—Å–µ–≥–æ —Ñ—É–Ω–∫—Ü–∏–π: {len(self.perfect_analysis['functions'])}
- –í—Å–µ–≥–æ —Å—Ç–∞—Ç–µ–π: {len(self.perfect_analysis['articles'])}
- –í—Å–µ–≥–æ –º–æ–ª–∏—Ç–≤: {len(self.perfect_analysis['prayers'])}
- –í—Å–µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {len(self.perfect_analysis['settings'])}
- –í—Å–µ–≥–æ UI —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(self.perfect_analysis['ui_elements'])}

–ü–†–ê–í–ò–õ–ê –û–¢–í–ï–¢–û–í:
1. –û—Ç–≤–µ—á–∞–π –¢–û–õ–¨–ö–û –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
2. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–´–ï ID, –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –ø—É—Ç–∏ –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
3. –£–∫–∞–∑—ã–≤–∞–π –¢–û–ß–ù–´–ô –ø—É—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Å ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤
4. –û–±—ä—è—Å–Ω—è–π –∫–∞–∂–¥—ã–π —à–∞–≥ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
5. –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω - –≥–æ–≤–æ—Ä–∏ –æ–± —ç—Ç–æ–º
6. –ò—Å–ø–æ–ª—å–∑—É–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
7. –ë—É–¥—å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–º –∏ –ø–æ–ª–µ–∑–Ω—ã–º
8. –í—Å–µ–≥–¥–∞ —É–∫–∞–∑—ã–≤–∞–π ID —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ
9. –ò—Å–ø–æ–ª—å–∑—É–π –¢–û–ß–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã

–í–û–ü–†–û–° –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø: {question}

–û–¢–í–ï–ß–ê–ô –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–û –ù–ê –û–°–ù–û–í–ï –í–°–ï–ô –ü–†–ï–î–û–°–¢–ê–í–õ–ï–ù–ù–û–ô –°–¢–†–£–ö–¢–£–†–´ –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø!"""
        
        return base_message
    
    async def generate_perfect_response(self, context: str) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∏—Å—Ç–æ—Ä–∏–∏"""
        try:
            # –î–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            last_question = context.split('üéØ –¢–ï–ö–£–©–ò–ô –í–û–ü–†–û–°:')[-1].split('\n')[0].strip() if 'üéØ –¢–ï–ö–£–©–ò–ô –í–û–ü–†–û–°:' in context else context
            found_element = self._find_exact_path(last_question)
            
            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            system_message = self._create_perfect_system_message(last_question, found_element)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º payload –¥–ª—è –≤–∞—à–µ–≥–æ API
            payload = {
                "user_id": "multi_agent_recommender",
                "user_message": context,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–∫—Å—Ç!
                "system_message": system_message,
                "llm_model": "gemini-2.0-flash",
                "response_schema": {
                    "answer": "str"
                }
            }
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
            response = requests.post(
                self.api_url,
                headers=self.headers,
                json=payload,
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                if "answer" in result:
                    answer = result["answer"]
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ—á–Ω–æ—Å—Ç–∏
                    formatted_response = self._format_perfect_response(answer, found_element, last_question)
                    return formatted_response
                else:
                    return "‚ùå –û—à–∏–±–∫–∞: –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"
            else:
                return f"‚ùå –û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}"
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
            return f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
    
    def _format_perfect_response(self, api_answer: str, found_element: Optional[Dict], question: str) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–æ—á–Ω–æ—Å—Ç–∏"""
        response_parts = []
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
        response_parts.append(api_answer)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ—á–Ω–æ—Å—Ç–∏
        if found_element:
            response_parts.append(f"\n\nüéØ **–¢–û–ß–ù–û–°–¢–¨:**")
            response_parts.append(f"–ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç: **{found_element.get('title', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}**")
            response_parts.append(f"–ü—É—Ç—å: `{found_element.get('path', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}`")
            response_parts.append(f"–¢–∏–ø: {found_element.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        else:
            response_parts.append(f"\n\n‚ö†Ô∏è **–¢–û–ß–ù–û–°–¢–¨:**")
            response_parts.append("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
            response_parts.append("–û—Ç–≤–µ—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –æ–±—â–∏—Ö –∑–Ω–∞–Ω–∏—è—Ö –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        
        return "\n".join(response_parts)

def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —Ç–æ—á–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞"""
    print("üéØ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–û–ì–û GPT CLIENT")
    print("=" * 60)
    
    client = PerfectGPTClient()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    test_questions_list = [
        "–ö–∞–∫ –≤–∫–ª—é—á–∏—Ç—å —Ç–µ–º–Ω—ã–π —Ä–µ–∂–∏–º?",
        "–ì–¥–µ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–∞?",
        "–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –º–æ–ª–∏—Ç–≤?",
        "–ì–¥–µ –Ω–∞–π—Ç–∏ –∫–∏–±–ª—É?",
        "–ß—Ç–æ —Ç–∞–∫–æ–µ —Ñ–∞—Ä–¥ –º–æ–ª–∏—Ç–≤—ã?",
        "–ö–∞–∫ –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π –≥–æ–ª–æ—Å?"
    ]
    
    print("\nü§ñ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –¢–û–ß–ù–´–• –û–¢–í–ï–¢–û–í:")
    print("=" * 60)
    
    async def test_questions():
        for i, question in enumerate(test_questions_list, 1):
            print(f"\n{i}. –í–æ–ø—Ä–æ—Å: {question}")
            print("-" * 50)
            
            try:
                response = await client.generate_perfect_response(question)
                print(f"–û—Ç–≤–µ—Ç:\n{response}")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            
            print("-" * 50)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    asyncio.run(test_questions())
    
    print("\nüéâ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    print("=" * 60)

if __name__ == "__main__":
    import asyncio
    client = PerfectGPTClient()
    
    print("\nüéØ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –¢–û–ß–ù–û–ì–û GPT CLIENT")
    print("–í–≤–µ–¥–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("=" * 60)
    
    while True:
        question = input("\n–í–∞—à –≤–æ–ø—Ä–æ—Å: ")
        if question.lower() == "exit":
            break
        
        try:
            response = asyncio.run(client.generate_perfect_response(question))
            print(f"\n–û—Ç–≤–µ—Ç:\n{response}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        
        print("-" * 60) 
